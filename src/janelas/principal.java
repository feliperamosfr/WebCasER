/*
 * principal.java
 *
 * Created on 12 de Março de 2008, 21:23
 */
package janelas;

import arquivos.*;
import java.awt.Desktop;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.*;

import webcaser.*;

/**
 *
 * @author  180000dn8
 */
public class principal extends javax.swing.JFrame {

    private WebCaseReader arquivo;
    JFileChooser fileChooser = new JFileChooser();
    // INSTANCIA OBJETO DE ARQUIVOS PARA GERAR TODOS OS ARQUIVOS CONFIGURADOS
    private Arquivos arquivosGer;
    private ArrayList<String> errosGeracao = new ArrayList<String>();
    private ArrayList<String> alertasGeracao = new ArrayList<String>();
    private String idTabela;
    private Desktop desktop = Desktop.getDesktop();

    /** Creates new form principal */
    public principal() {
        initComponents();
        // Evento ao clicar na JTable
        jtTabelas.addMouseListener(new MouseAdapter() {

            public void mouseClicked(MouseEvent e) {
                jtTabelaMouseClicked(e);
            }
        });

        // Evento ao clicar na JTable
        jtColunas.addMouseListener(new MouseAdapter() {

            public void mouseClicked(MouseEvent e) {
                jtColunaMouseClicked();
            }
        });


        // Define caracteristicas do filechooser
        fileChooser.setApproveButtonText("Abrir");
        FileNameExtensionFilter files = new FileNameExtensionFilter("Arquivos XML", "xml");
        fileChooser.setFileFilter(files);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        // Efetua tratamento de componentes de tela
        tratamentoComponentes("");

        // Tratamento da janela
        setEnabled(true);
        setVisible(true);
        setLocationRelativeTo(null);
        setTitle("WebCasER - Gerador automático de código Java(JSP)");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtpPainel = new javax.swing.JTabbedPane();
        jpArquivo = new javax.swing.JPanel();
        jbAbrir = new javax.swing.JButton();
        jtfArquivo = new javax.swing.JTextField();
        jbValidar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaErros = new javax.swing.JTextArea();
        jlMensagem = new javax.swing.JLabel();
        jbReiniciar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel20 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jtfTemplate = new javax.swing.JTextField();
        jtfDestino = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jtfModel = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jtfDao = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jtfController = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jtfPacote2 = new javax.swing.JTextField();
        jtfPacote1 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jtfPacote3 = new javax.swing.JTextField();
        jtfDriver = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtfUrl = new javax.swing.JTextField();
        jtfUsuario = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jtfSenha = new javax.swing.JTextField();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtTabelas = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtColunas = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel17 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jbGerarArquivos = new javax.swing.JButton();
        jlMsgGeracao = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jtaErrosGeracao = new javax.swing.JTextArea();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jtaAlertasGeracao = new javax.swing.JTextArea();
        jLabel19 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("fPrincipal"); // NOI18N

        jpArquivo.setName("jpArquivo"); // NOI18N

        jbAbrir.setText("Abrir arquivo xml do DBDesigner");
        jbAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAbrirActionPerformed(evt);
            }
        });

        jtfArquivo.setEditable(false);
        jtfArquivo.setName("jtfArquivo"); // NOI18N

        jbValidar.setLabel("Validar XML");
        jbValidar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbValidarActionPerformed(evt);
            }
        });

        jtaErros.setColumns(20);
        jtaErros.setRows(5);
        jScrollPane1.setViewportView(jtaErros);

        jlMensagem.setFont(new java.awt.Font("Tahoma", 1, 12));
        jlMensagem.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jbReiniciar.setText("Reiniciar");
        jbReiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbReiniciarActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel20.setText("Inconsistências na leitura do modelo ER");

        javax.swing.GroupLayout jpArquivoLayout = new javax.swing.GroupLayout(jpArquivo);
        jpArquivo.setLayout(jpArquivoLayout);
        jpArquivoLayout.setHorizontalGroup(
            jpArquivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpArquivoLayout.createSequentialGroup()
                .addGroup(jpArquivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpArquivoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpArquivoLayout.createSequentialGroup()
                        .addGap(316, 316, 316)
                        .addComponent(jbReiniciar))
                    .addGroup(jpArquivoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jbAbrir, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE))
                    .addGroup(jpArquivoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jtfArquivo, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpArquivoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpArquivoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jpArquivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbValidar, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE)
                            .addComponent(jlMensagem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpArquivoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel20)))
                .addContainerGap())
        );
        jpArquivoLayout.setVerticalGroup(
            jpArquivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpArquivoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbAbrir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfArquivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbValidar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlMensagem, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbReiniciar)
                .addContainerGap())
        );

        jtpPainel.addTab("Arquivo/Validar", jpArquivo);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel5.setText("Templates");

        jtfTemplate.setText("c:\\webcaser\\src\\templates");

        jtfDestino.setText("c:\\webcaser\\arqs");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel6.setText("Destino");

        jtfModel.setText("com.webcaser.model");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel7.setText("Model");

        jtfDao.setText("com.webcaser.dao");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel8.setText("Dao");

        jtfController.setText("com.webcaser.controller");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel9.setText("Controler");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Templates");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel12.setText("Pacote Geral 2");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel13.setText("Pacote Geral 1");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel15.setText("Pacote Geral 3");

        jtfDriver.setText("com.mysql.jdbc.Driver");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel1.setText("Driver");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel2.setText("URL");

        jtfUrl.setText("jdbc:mysql://localhost:3306/webcaser");

        jtfUsuario.setText("root");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel3.setText("Usuário");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel4.setText("Senha");

        jtfSenha.setText("root");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Packages");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Informações de Conexão");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7)
                            .addComponent(jLabel9)
                            .addComponent(jLabel13)
                            .addComponent(jLabel12)
                            .addComponent(jLabel15))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfPacote3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                            .addComponent(jtfController, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                            .addComponent(jtfDao, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                            .addComponent(jtfModel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                            .addComponent(jtfPacote1, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                            .addComponent(jtfPacote2, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator5, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5))
                        .addGap(47, 47, 47)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jtfTemplate, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                            .addComponent(jtfDestino, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(20, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtfUrl)
                            .addComponent(jtfUsuario)
                            .addComponent(jtfSenha)
                            .addComponent(jtfDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jtfTemplate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jtfDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfDao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfController, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jtfPacote1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jtfPacote2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfPacote3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(18, 18, 18)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtfDriver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtfUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtfUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jtfSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jtpPainel.addTab("Configurações", jPanel1);

        jtTabelas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Tabela", "Label", "Gerar?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public Class<?> getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtTabelas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtTabelasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jtTabelas);
        jtTabelas.getColumnModel().getColumn(0).setResizable(false);
        jtTabelas.getColumnModel().getColumn(0).setPreferredWidth(4);
        jtTabelas.getColumnModel().getColumn(1).setResizable(false);
        jtTabelas.getColumnModel().getColumn(2).setResizable(false);
        jtTabelas.getColumnModel().getColumn(3).setPreferredWidth(5);

        jtColunas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Coluna", "Label", "Detalhe FK?", "Gerar?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, false
            };

            public Class<?> getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtColunas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtColunasMouseClicked(evt);
            }
        });
        jtColunas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtColunasFocusLost(evt);
            }
        });
        jScrollPane3.setViewportView(jtColunas);
        jtColunas.getColumnModel().getColumn(0).setResizable(false);
        jtColunas.getColumnModel().getColumn(0).setPreferredWidth(4);
        jtColunas.getColumnModel().getColumn(1).setResizable(false);
        jtColunas.getColumnModel().getColumn(2).setResizable(false);
        jtColunas.getColumnModel().getColumn(4).setPreferredWidth(5);

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel16.setText("Colunas");

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel17.setText("Tabelas");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 692, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE)
                                .addComponent(jLabel16))
                            .addComponent(jSeparator4, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE))
                        .addGap(23, 23, 23))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addContainerGap(647, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                .addGap(13, 13, 13)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jtpPainel.addTab("Tabelas", jPanel2);

        jbGerarArquivos.setText("Gerar Arquivos");
        jbGerarArquivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGerarArquivosActionPerformed(evt);
            }
        });

        jlMsgGeracao.setFont(new java.awt.Font("Tahoma", 1, 12));
        jlMsgGeracao.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlMsgGeracao.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jtaErrosGeracao.setColumns(20);
        jtaErrosGeracao.setRows(5);
        jScrollPane5.setViewportView(jtaErrosGeracao);

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel18.setText("Erros:");

        jtaAlertasGeracao.setColumns(20);
        jtaAlertasGeracao.setRows(5);
        jScrollPane6.setViewportView(jtaAlertasGeracao);

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel19.setText("Informações sobre a geração:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jlMsgGeracao, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE)
                    .addComponent(jbGerarArquivos, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbGerarArquivos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlMsgGeracao, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );

        jtpPainel.addTab("Gerar", jPanel4);

        jMenuBar1.setName("jmbPrincipal"); // NOI18N

        jMenu1.setLabel("Arquivo");
        jMenu1.setName("jmArquivo"); // NOI18N
        jMenuBar1.add(jMenu1);

        jMenuBar2.setName("jmbPrincipal"); // NOI18N

        jMenu2.setText("Ajuda");
        jMenu2.setName("jmArquivo"); // NOI18N
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItem2.setText("Passo a Passo");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem1.setText("Palavras Reservadas");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar2.add(jMenu2);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jtpPainel, javax.swing.GroupLayout.DEFAULT_SIZE, 707, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jtpPainel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jtpPainel.getAccessibleContext().setAccessibleName("jtpPainel");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void jbReiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbReiniciarActionPerformed
        // TODO adicione seu código de manipulação aqui:
        tratamentoComponentes("");
    }//GEN-LAST:event_jbReiniciarActionPerformed

    private void jbValidarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbValidarActionPerformed
        // Abre arquivo e lê tags
        arquivo.readAll();
        // Valida xml lido
        arquivo.validaXml();

        // Limpa caixa de erros
        jtaErros.setText("");

        // Se existirem criticas, exibe em tela e não permite prosseguir
        ArrayList<?> erros = arquivo.getValidacoes();
        if (erros.size() > 0) {
            for (int i = 0; i < erros.size(); i++) {
                jtaErros.append((String) erros.get(i));
            }

            // Exibe mensagem de crítica
            jlMensagem.setText("Foram encontrados erros no XML.");
            jlMensagem.setForeground(new java.awt.Color(255, 0, 0));
            tratamentoAbas(1);

        } else {
            // Exibe mensagem de crítica
            jlMensagem.setText("Arquivo validado com sucesso.");
            jlMensagem.setForeground(new java.awt.Color(0, 102, 0));
            // Abre informações de configuração informadas em tela
            abrirConfig();
            // Atualiza Lista de tabelas em tela
            atualizaTela();
            // 
            tratamentoAbas(2);

        }
    }//GEN-LAST:event_jbValidarActionPerformed

    private void jbAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAbrirActionPerformed
        int result = fileChooser.showOpenDialog(null);

        if (result == JFileChooser.CANCEL_OPTION) {
            System.out.println("BOTAO CANCELAR");

        } else {

            // Faz tratamentos dos componentes de tela informando que está abrindo arquivo
            tratamentoComponentes(fileChooser.getSelectedFile().getPath());

        }
    }//GEN-LAST:event_jbAbrirActionPerformed

    private void jbGerarArquivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGerarArquivosActionPerformed
        // WCE TEMP - CHAMA METODO PARA CRIAR OS ARQUIVOS
        geraArquivos();
        
}//GEN-LAST:event_jbGerarArquivosActionPerformed

    private void jtTabelasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtTabelasMouseClicked
        
    }//GEN-LAST:event_jtTabelasMouseClicked

    private void jtColunasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtColunasMouseClicked
    // TODO add your handling code here:
}//GEN-LAST:event_jtColunasMouseClicked

    private void jtColunasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtColunasFocusLost
        // TODO add your handling code here:
        atualizaLabelColunas();
          
    }//GEN-LAST:event_jtColunasFocusLost

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed

    // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        File file = new File("c:\\webcaser\\palavras-reservadas.mht");
        try {
            desktop.open(file);
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

        File file = new File("c:\\webcaser\\passo-a-passo.mht");
        try {
            desktop.open(file);
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void atualizaLabelColunas() {
        DefaultTableModel dtmCol = (DefaultTableModel) jtColunas.getModel();
        // Informações da Tabela, para poder atualizar as colunas com o FLAG de isDetalhe
//        DefaultTableModel dtm = (DefaultTableModel) jtTabelas.getModel();
//        String keytab = (String) dtm.getValueAt(jtTabelas.getSelectedRow(), 0);
//        Tabela tab = this.estrutura.get(keytab);
        Tabela tab = this.estrutura.get(this.idTabela);
        HashMap<String, Coluna> estruturaCampos = tab.getCampos();

        // Para a tabela tabela selecionada na JTable
        int x = jtColunas.getModel().getRowCount();
        // Percorre todas as demais colunas e seta FALSE
        for (int i = 0; i < x; i++) {
            Coluna col = estruturaCampos.get(dtmCol.getValueAt(i, 1));
            // Atualiza o Label com o dado informado em tela
            col.setLabel((String) dtmCol.getValueAt(i, 2));
        }

    }

    private void jtTabelaMouseClicked(MouseEvent e) {
        DefaultTableModel dtm = (DefaultTableModel) jtTabelas.getModel();
        // Para a tabela tabela selecionada na JTable
        this.idTabela = (String) dtm.getValueAt(jtTabelas.getSelectedRow(), 0);

        /*        String keytab = (String) dtm.getValueAt(jtTabelas.getSelectedRow(), 0);
        Tabela tab = this.estrutura.get(keytab);
        // Percorre todas as colunas da Tabela
        HashMap<String, Coluna> estruturaCampos = tab.getCampos();
        // Validacoes de todos os campos da Tabela
        for (Iterator it = estruturaCampos.keySet().iterator(); it.hasNext();) {
        String key = (String) it.next();
        Coluna col = estruturaCampos.get(key);
        }
         */
        atualizaTabelaColuna();
    }

    private void jtColunaMouseClicked() {
        DefaultTableModel dtmCol = (DefaultTableModel) jtColunas.getModel();

        // Informações da Tabela, para poder atualizar as colunas com o FLAG de isDetalhe
//        DefaultTableModel dtm = (DefaultTableModel) jtTabelas.getModel();
//        String keytab = (String) dtm.getValueAt(jtTabelas.getSelectedRow(), 0);
        String keytab = this.idTabela;
        Tabela tab = this.estrutura.get(keytab);
        HashMap<String, Coluna> estruturaCampos = tab.getCampos();

        int colunaSel = jtColunas.getSelectedRow();
        Boolean marcado = (Boolean) dtmCol.getValueAt(jtColunas.getSelectedRow(), 3);

        // Para a tabela tabela selecionada na JTable
        int x = jtColunas.getModel().getRowCount();
        // Atualiza a coluna com valor marcado
        Coluna col = estruturaCampos.get(dtmCol.getValueAt(colunaSel, 1));
        // Atualiza label
        col.setLabel((String) dtmCol.getValueAt(colunaSel, 2));

        // Se marcado, desmarca todas as demais e atualiza colunas da tabela
        if (marcado) {
            col.setDetalhe(true);
            // Percorre todas as demais colunas e seta FALSE
            for (int i = 0; i < x; i++) {
                col = estruturaCampos.get(dtmCol.getValueAt(i, 1));
                if (i != colunaSel) {
                    dtmCol.setValueAt(false, i, 3);
                    col.setDetalhe(false);
                }
            }
        }

    }

    private void atualizaTela() {
        ///////////////// Executa Gerações
        // Pega o atributo que contem todo o conteudo (importante) do XML
        // O HashMap contém as informações das tabelas e campos
        this.estrutura = arquivo.getEstrutura();

        // EXCLUI TODAS LINHAS DA TABELA
        DefaultTableModel dtm = (DefaultTableModel) jtTabelas.getModel();
        Vector<?> rs = dtm.getDataVector();
        java.util.Iterator it = rs.iterator();

        while (it.hasNext()) {
            Vector<?> r = (Vector<?>) it.next();
            it.remove();
        }
        ;


        // Adiciona em tela todas as tabelas lidas do ER
        // Percorre todas as tabelas e cria os arquivos
        for (Iterator<String> it2 = this.estrutura.keySet().iterator(); it2.hasNext();) {
            String keytab = (String) it2.next();
            Tabela tab = this.estrutura.get(keytab);
            //JComboBox comboBox = new JComboBox();

            //lembre-se um "" para cada coluna na tabela
            dtm.addRow(new Object[]{tab.getId(), tab.getTableName(), tab.getLabel(), false});

        }
    }

    private void atualizaTabelaColuna() {
        ///////////////// Executa Gerações
        // Pega o atributo que contem todo o conteudo (importante) do XML
        // O HashMap contém as informações das tabelas e campos
        this.estrutura = arquivo.getEstrutura();
        DefaultTableModel dtmTab = (DefaultTableModel) jtTabelas.getModel();

        // EXCLUI TODAS LINHAS DA TABELA
        DefaultTableModel dtm = (DefaultTableModel) jtColunas.getModel();
        Vector<?> rs = dtm.getDataVector();
        java.util.Iterator it = rs.iterator();
        while (it.hasNext()) {
            Vector<?> r = (Vector<?>) it.next();
            it.remove();
        }

        // Para cada tabela informada na JTable, identifica se a mesma deverá ou não ser gerada
        // Para a tabela tabela selecionada na JTable
        String keytab = (String) dtmTab.getValueAt(jtTabelas.getSelectedRow(), 0);
        Tabela tab = this.estrutura.get(keytab);

        // Percorre todas as colunas da Tabela
        HashMap<String, Coluna> estruturaCampos = tab.getCampos();
        // Validacoes de todos os campos da Tabela
        for (Iterator<String> it2 = estruturaCampos.keySet().iterator(); it2.hasNext();) {
            String key = (String) it2.next();
            Coluna col = estruturaCampos.get(key);

            //lembre-se um "" para cada coluna na tabela
            dtm.addRow(new Object[]{col.getId(), col.getColName(), col.getLabel(), col.isDetalhe(), col.isHabilitado()});

        }


    }

    /*
     * ABRE ARQUIVO DE CONFIGURAÇÃO E IDENTIFICA TODOS OS TEMPLATES CONFIGURADOS
     */
    private void abrirConfig() {
        // tenta abrir arquivo de configuração
        try {
            // ABRE O ARQUIVO DE CONFIGURAÇÃO PARA IDENTIFICAR TUDO O QUE DEVE SER GERADO
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbf.newDocumentBuilder();
            //Este documento possuirá toda a estrutura do arquivo
            Document doc = db.parse(jtfTemplate.getText().concat("\\config_webcaser.xml"));
            // Pegamos o this.elemento principal do documento, e depois explodimos em uma lista de nós
            Element config_webcaser = doc.getDocumentElement();

            // Atualiza lista de templates
            // LÊ NODO DE TEMPLATES
            NodeList nlTemplates = XmlReader.readNode(config_webcaser, "template");

            // Percorre todos os templates configurados e adiciona a lista
            for (int pos = 0; pos < nlTemplates.getLength(); pos++) {
                Element tagTemplate = (Element) nlTemplates.item(pos);
                Template temp = new Template(XmlReader.readTag(tagTemplate, "", "nome"),
                        XmlReader.readTag(tagTemplate, "", "arquivoTemplate"),
                        XmlReader.readTag(tagTemplate, "", "tipo"),
                        XmlReader.readTag(tagTemplate, "", "nomeAntes"),
                        XmlReader.readTag(tagTemplate, "", "nomeDepois"),
                        XmlReader.readTag(tagTemplate, "", "extensao"),
                        true);

                this.templates.put(temp.getNome(), temp);
            }

        } catch (Exception e) {
            // WCE AJUSTAR
            System.out.println("Problemas na abertura dos arquivos de configuração!");
            System.out.println(e.getMessage());
        }
    }

    private boolean validarInformacoes() {
        // Pega o DefaultTableModel da tabela
        DefaultTableModel dtm = (DefaultTableModel) jtTabelas.getModel();
        int x = jtTabelas.getModel().getRowCount();
        int totalTabelas = 0;
        boolean retorno = true;

        // Se nenhuma tabela modelada no ER
        if (x == 0) {
            errosGeracao.add("Não foi possível identificar nenhuma tabela no modelo ER.");
            retorno = false;
        }

        // Verifica se diretório de template informado
        if (jtfTemplate.getText().isEmpty()) {
            errosGeracao.add("Diretório de templates não informado.");
            retorno = false;
        } else {
            if (!(new File(jtfTemplate.getText()).exists())) {
                errosGeracao.add("Diretório de templates não existe.");
                retorno = false;
            }
            if (!(new File(jtfTemplate.getText().concat("\\config_webcaser.xml")).exists())) {
                errosGeracao.add("Arquivo de configuração config_webcaser.xml não encontrado.");
                retorno = false;
            }
            
        }

        // Verifica se diretório destino informado
        if (jtfDestino.getText().isEmpty()) {
            errosGeracao.add("Diretório de destino dos arquivos não informado.");
            retorno = false;
        } else {
            if (!(new File(jtfDestino.getText()).exists())) {
                errosGeracao.add("Diretório de Destino não existe.");
                retorno = false;
            } 
        }

        // Verifica se informação de pacote DAO informado
        if (jtfDao.getText().isEmpty()) {
            alertasGeracao.add("Não informada package Dao.");
        }
        // Verifica se informação de pacote Controller informado
        if (jtfController.getText().isEmpty()) {
            alertasGeracao.add("Não informada package Controller.");
        }
        // Verifica se informação de pacote DAO informado
        if (jtfModel.getText().isEmpty()) {
            alertasGeracao.add("Não informada package Model.");
        }
        // Verifica se informação de pacote geral 1 informado
        if (jtfPacote1.getText().isEmpty()) {
            alertasGeracao.add("Não informada package Geral 1.");
        }
        // Verifica se informação de pacote geral 2 informado
        if (jtfPacote2.getText().isEmpty()) {
            alertasGeracao.add("Não informada package Geral 2.");
        }
        // Verifica se informação de pacote geral 3 informado
        if (jtfPacote3.getText().isEmpty()) {
            alertasGeracao.add("Não informada package Geral 3.");
        }

        // Verifica informação de conexão
        if (jtfDriver.getText().isEmpty()) {
            alertasGeracao.add("Não informado Driver para conexão com o banco.");
        }
        if (jtfUrl.getText().isEmpty()) {
            alertasGeracao.add("Não informado URL para conexão com o banco.");
        }
        if (jtfUsuario.getText().isEmpty()) {
            alertasGeracao.add("Não informado Usuário para conexão com o banco.");
        }
        if (jtfSenha.getText().isEmpty()) {
            alertasGeracao.add("Não informado Senha para conexão com o banco.");
        }


        if (retorno) {
            for (int i = 0; i < x; i++) {
                // Para cada tabela informada na JTable, identifica se a mesma deverá ou não ser gerada
                boolean flag = (Boolean) dtm.getValueAt(i, 3);
                String labelTabela = (String) dtm.getValueAt(i, 2);
                // Atualiza a tabela com o FLAG para gerar ou Não a mesma
                Tabela tab = arquivo.getEstrutura().get((String) dtm.getValueAt(i, 0));
                tab.setHabilitado(flag);
                tab.setLabel(labelTabela);

                // Se Tabela não gerada, insere na aba de Alertas
                if (!tab.isHabilitado()) {
                    alertasGeracao.add("Tabela ".concat(tab.getTableName()).concat(" não selecionada."));
                } else {
                    totalTabelas++;
                }


                boolean possuiDetalheFK = false;
                // Percorre todas as colunas da Tabela
                HashMap<String, Coluna> estruturaCampos = tab.getCampos();
                // Validacoes de todos os campos da Tabela
                for (Iterator<String> it2 = estruturaCampos.keySet().iterator(); it2.hasNext();) {
                    String key = (String) it2.next();
                    Coluna col = estruturaCampos.get(key);

                    // SE Coluna com label em branco
                    if (col.getLabel().isEmpty() && col.isHabilitado()) {
                        errosGeracao.add("Tabela: ".concat(tab.getTableName()).concat(". Coluna:".concat(col.getColName()).concat(". Coluna não possui 'label' informado.")));
                    }
                    // Se possuir um campo marcado como detalhe
                    if (col.isDetalhe()) {
                        possuiDetalheFK = true;

                        // Percorrerá todas as tabelas até identificar todos os campos que
                        // são FK desta tabela
                        for (Iterator<String> ite = this.estrutura.keySet().iterator(); ite.hasNext();) {
                            String keytab = (String) ite.next();
                            Tabela tabFk = this.estrutura.get(keytab);
                            // Percorre todas as colunas da Tabela
                            HashMap<String, Coluna> colunas = tabFk.getCampos();
                            // Validacoes de todos os campos da Tabela
                            for (Iterator<String> itc = colunas.keySet().iterator(); itc.hasNext();) {
                                String keyc = (String) itc.next();
                                Coluna coluna = colunas.get(keyc);
                                // Se coluna for um FK de outra tabela
                                // E tabela origem for a mesma percorrida no loop principal
                                if (coluna.isIsForeignKey() && coluna.getTabelaOrigem().equals(tab.getTableName())) {
                                    coluna.setNomeDetalheOrigem(col.getColName());
                                }

                            }
                        }




                    }
                }
                // Se não possuir nenhum campo detalhe informado
                if (!possuiDetalheFK) {
                    alertasGeracao.add("Tabela ".concat(tab.getTableName()).concat(". Não possui campo de 'detalhe' informado."));
                }

            }

            // Se nenhuma tabela selecionada
            if (totalTabelas == 0) {
                alertasGeracao.add("Nenhuma tabela informada. Somente serão gerados arquivos tipo UNICO.");
            }

        }

        // ************************************ Se possuir Alertas
        jtaAlertasGeracao.setText("");
        if (alertasGeracao.size() > 0) {
            // Exibe mensagem de crítica
            jlMsgGeracao.setText("Foram encontradas algumas inconsistências na configuração, mas que não impediram a geração.");
            jlMsgGeracao.setForeground(new java.awt.Color(255, 102, 0));
            jtaAlertasGeracao.append("-- Informações gerais sobre a geração -- \n");
            for (int ii = 0; ii < alertasGeracao.size(); ii++) {
                jtaAlertasGeracao.append(((String) alertasGeracao.get(ii)).concat("\n"));
            }
            jtaAlertasGeracao.append("\n");
        }
        alertasGeracao.clear();

        // Se possuir ERROS
        jtaErrosGeracao.setText("");
        if (errosGeracao.size() > 0) {
            jlMsgGeracao.setText("Foram encontrados Erros na configuração que impedem a geração. Verifique!");
            jlMsgGeracao.setForeground(new java.awt.Color(255, 0, 0));
            for (int ii = 0; ii < errosGeracao.size(); ii++) {
                jtaErrosGeracao.append(((String) errosGeracao.get(ii)).concat("\n"));
            }
            retorno = false;
        }
        errosGeracao.clear();

        // Se nenhum erro ou crítica
        if ((alertasGeracao.size() == 0) && (errosGeracao.size() == 0)) {
            jlMsgGeracao.setText("Todos arquivos gerados com sucesso.");
            jlMsgGeracao.setForeground(new java.awt.Color(0, 102, 0));
        }
        return (retorno);
    }
    /*
     * METODO PARA CRIAÇÃO DOS ARQUIVOS PARAMETRIZADOS
     */

    private void geraArquivos() {

        if (validarInformacoes()) {

            jtaAlertasGeracao.append("-- Arquivos gerados -- \n");

            // Instancia classe de geração
            arquivosGer = new Arquivos(jtfTemplate.getText(),
                    jtfDriver.getText(),
                    jtfUrl.getText(),
                    jtfUsuario.getText(),
                    jtfSenha.getText(),
                    jtfDao.getText(),
                    jtfModel.getText(),
                    jtfController.getText(),
                    jtfPacote1.getText(),
                    jtfPacote2.getText(),
                    jtfPacote3.getText(),
                    this.estrutura);

            // Percorre todos os templates lidos no arquivo de configuração
            for (Iterator<String> it = templates.keySet().iterator(); it.hasNext();) {
                String key = (String) it.next();
                Template temp = templates.get(key);

                // Se template marcado para ser gerado
                if (temp.isHabilitado()) {
                    try {
                        arquivosGer.criaArquivos(jtfDestino.getText(), temp, temp.getTipo());

                        // Ecxibe dados em tela de tudo o que foi gerado
                        jtaAlertasGeracao.append("\n Template: ".concat(temp.getNome()));
                        jtaAlertasGeracao.append("\n Arquivo Template: ".concat(temp.getArquivoTemplate()));
                        jtaAlertasGeracao.append("\n Tipo: ".concat(temp.getTipo()));
                        jtaAlertasGeracao.append("\n Arquivos Gerados: ");
                        // Percorre todas as tabelas e as que estão habilitadas, informa em tela
                        if (temp.getTipo().equals("TABELA")) {
                            for (Iterator<String> it2 = this.estrutura.keySet().iterator(); it2.hasNext();) {
                                String keytab = (String) it2.next();
                                Tabela tab = this.estrutura.get(keytab);
                                if (tab.isHabilitado()) {
                                    jtaAlertasGeracao.append("\n ".concat(temp.getNomeAntes()).concat(tab.getTableName()).concat(temp.getNomeDepois()).concat(".").concat(temp.getExtensao()));
                                }
                            }
                        } else {
                            jtaAlertasGeracao.append("\n ".concat(temp.getNomeAntes()).concat(temp.getNome()).concat(temp.getNomeDepois()).concat(".").concat(temp.getExtensao()));
                        }
                        jtaAlertasGeracao.append("\n");

                    } catch (Exception e) {
                        //jlMensagem.setText( "Erro na geração dos arquivos da Tabela: ".concat(tab.getTableName()) );
                        System.out.println("Erro na geração do arquivo: ".concat(temp.getNome()));
                    }
                }
            }
        }
    }

    private void tratamentoAbas(int codigo) {

        // Bloqueia tudo, libera apenas a primeira aba
        if (codigo == 1) {
            jtpPainel.setEnabledAt(0, true);
            jtpPainel.setEnabledAt(1, false);
            jtpPainel.setEnabledAt(2, false);
            jtpPainel.setEnabledAt(3, false);
        // Libera todas as abas
        } else if (codigo == 2) {
            jtpPainel.setEnabledAt(0, true);
            jtpPainel.setEnabledAt(1, true);
            jtpPainel.setEnabledAt(2, true);
            jtpPainel.setEnabledAt(3, true);
        }
    }
    /*
     * Efetua tratamento dos componentes de tela
     */

    private void tratamentoComponentes(String arquivoNome) {
        // Sempre limpa mensagem
        jlMensagem.setText("");
        // Sempre limpa campo de erros
        jtaErros.setText("");
        jtaAlertasGeracao.setText("");
        jtaErrosGeracao.setText("");
        // Limpa erros de geração
        errosGeracao.clear();
        alertasGeracao.clear();

        // se estiver abrindo arquivo
        if (!arquivoNome.isEmpty()) {
            // Desabilita botão de abrir
            jbAbrir.setEnabled(false);
            // Habilita botão de validar
            jbValidar.setEnabled(true);
            // Joga para campo texto o path + nome do arquivo
            jtfArquivo.setText(arquivoNome);
            // Instancia arquivo
            arquivo = new WebCaseReader(arquivoNome);

        // se reiniciado ou inicialização da tela, retorna ao estado inicial
        } else {
            // Habilita botão de abrir
            jbAbrir.setEnabled(true);
            // Desabilita botão de validar
            jbValidar.setEnabled(false);
            // Limpa campo texto
            jtfArquivo.setText("");
            // inicia atributo arquivo (inf do xml)
            arquivo = new WebCaseReader();
            // Bloqueia todas abas, menos a primeira
            tratamentoAbas(1);
        // 
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new principal().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JButton jbAbrir;
    private javax.swing.JButton jbGerarArquivos;
    private javax.swing.JButton jbReiniciar;
    private javax.swing.JButton jbValidar;
    private javax.swing.JLabel jlMensagem;
    private javax.swing.JLabel jlMsgGeracao;
    private javax.swing.JPanel jpArquivo;
    private javax.swing.JTable jtColunas;
    private javax.swing.JTable jtTabelas;
    private javax.swing.JTextArea jtaAlertasGeracao;
    private javax.swing.JTextArea jtaErros;
    private javax.swing.JTextArea jtaErrosGeracao;
    private javax.swing.JTextField jtfArquivo;
    private javax.swing.JTextField jtfController;
    private javax.swing.JTextField jtfDao;
    private javax.swing.JTextField jtfDestino;
    private javax.swing.JTextField jtfDriver;
    private javax.swing.JTextField jtfModel;
    private javax.swing.JTextField jtfPacote1;
    private javax.swing.JTextField jtfPacote2;
    private javax.swing.JTextField jtfPacote3;
    private javax.swing.JTextField jtfSenha;
    private javax.swing.JTextField jtfTemplate;
    private javax.swing.JTextField jtfUrl;
    private javax.swing.JTextField jtfUsuario;
    private javax.swing.JTabbedPane jtpPainel;
    // End of variables declaration//GEN-END:variables
    private HashMap<String, Template> templates = new HashMap<String, Template>();
    private HashMap<String, Tabela> estrutura = new HashMap<String, Tabela>();
}
